// Enhance the language-data.ts file with more comprehensive language features

export interface LanguageKeywords {
    keywords: string[]
    builtins: string[]
    operators: string[]
    snippets: Record<string, LanguageSnippet>
    documentation: Record<string, string>
  }
  
  export interface LanguageSnippet {
    prefix: string
    body: string[]
    description: string
  }
  
  export const languageData: Record<string, LanguageKeywords> = {
    javascript: {
      keywords: [
        "break",
        "case",
        "catch",
        "class",
        "const",
        "continue",
        "debugger",
        "default",
        "delete",
        "do",
        "else",
        "export",
        "extends",
        "false",
        "finally",
        "for",
        "function",
        "if",
        "import",
        "in",
        "instanceof",
        "new",
        "null",
        "return",
        "super",
        "switch",
        "this",
        "throw",
        "true",
        "try",
        "typeof",
        "var",
        "void",
        "while",
        "with",
        "yield",
        "let",
        "static",
        "enum",
        "await",
        "implements",
        "package",
        "protected",
        "interface",
        "private",
        "public",
        "async",
        "get",
        "set",
      ],
      builtins: [
        "Array",
        "Date",
        "eval",
        "function",
        "hasOwnProperty",
        "Infinity",
        "isFinite",
        "isNaN",
        "isPrototypeOf",
        "length",
        "Math",
        "NaN",
        "name",
        "Number",
        "Object",
        "prototype",
        "String",
        "toString",
        "undefined",
        "valueOf",
        "console",
        "document",
        "window",
        "fetch",
        "localStorage",
        "sessionStorage",
        "setTimeout",
        "setInterval",
        "Promise",
        "Map",
        "Set",
        "WeakMap",
        "WeakSet",
        "Symbol",
        "Proxy",
        "Reflect",
        "JSON",
        "Error",
        "RegExp",
      ],
      operators: [
        "+",
        "-",
        "*",
        "/",
        "%",
        "++",
        "--",
        "=",
        "+=",
        "-=",
        "*=",
        "/=",
        "%=",
        "==",
        "===",
        "!=",
        "!==",
        ">",
        "<",
        ">=",
        "<=",
        "&&",
        "||",
        "!",
        "&",
        "|",
        "^",
        "~",
        "<<",
        ">>",
        ">>>",
        "?",
        ":",
      ],
      snippets: {
        "console.log": {
          prefix: "log",
          body: ["console.log($1);"],
          description: "Log output to console",
        },
        function: {
          prefix: "fn",
          body: ["function ${1:name}(${2:params}) {", "\t$0", "}"],
          description: "Function declaration",
        },
        "arrow function": {
          prefix: "af",
          body: ["const ${1:name} = (${2:params}) => {", "\t$0", "};"],
          description: "Arrow function",
        },
        "if statement": {
          prefix: "if",
          body: ["if (${1:condition}) {", "\t$0", "}"],
          description: "If statement",
        },
        "try/catch": {
          prefix: "try",
          body: ["try {", "\t$1", "} catch (${2:error}) {", "\t$0", "}"],
          description: "Try/catch statement",
        },
        "for loop": {
          prefix: "for",
          body: ["for (let ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {", "\t$0", "}"],
          description: "For loop",
        },
        forEach: {
          prefix: "foreach",
          body: ["${1:array}.forEach((${2:item}) => {", "\t$0", "});"],
          description: "Array forEach loop",
        },
        map: {
          prefix: "map",
          body: ["${1:array}.map((${2:item}) => {", "\t$0", "});"],
          description: "Array map",
        },
        filter: {
          prefix: "filter",
          body: ["${1:array}.filter((${2:item}) => {", "\t$0", "});"],
          description: "Array filter",
        },
        reduce: {
          prefix: "reduce",
          body: ["${1:array}.reduce((${2:accumulator}, ${3:current}) => {", "\t$0", "}, ${4:initial});"],
          description: "Array reduce",
        },
        promise: {
          prefix: "promise",
          body: ["return new Promise((resolve, reject) => {", "\t$0", "});"],
          description: "Create a new Promise",
        },
        "async function": {
          prefix: "async",
          body: ["async function ${1:name}(${2:params}) {", "\t$0", "}"],
          description: "Async function declaration",
        },
        setTimeout: {
          prefix: "timeout",
          body: ["setTimeout(() => {", "\t$0", "}, ${1:delay});"],
          description: "Set timeout",
        },
      },
      documentation: {
        function: "Declares a function in JavaScript.",
        const: "Declares a block-scoped, immutable variable.",
        let: "Declares a block-scoped, mutable variable.",
        var: "Declares a function-scoped variable.",
        if: "Executes a statement if a specified condition is truthy.",
        for: "Creates a loop that executes code for each element in an array or object.",
        while: "Creates a loop that executes code as long as a condition is true.",
        try: "Implements error handling for code that might throw exceptions.",
        async: "Declares an asynchronous function that returns a Promise.",
        await: "Pauses execution of an async function until a Promise is settled.",
        class: "Defines a class (introduced in ES6).",
        import: "Imports bindings from a module.",
        export: "Exports functions, objects, or primitive values from a module.",
        Promise: "Represents a value that may not be available yet but will be resolved at some point in the future.",
        Array: "A global object that is used in the construction of arrays, which are high-level, list-like objects.",
        Map: "Holds key-value pairs and remembers the original insertion order of the keys.",
        Set: "Lets you store unique values of any type, whether primitive values or object references.",
        fetch: "The Fetch API provides an interface for fetching resources (including across the network).",
        localStorage: "Allows you to save key/value pairs in a web browser, persisting even when the browser is closed.",
        sessionStorage: "Similar to localStorage but data is cleared when the page session ends.",
      },
    },
    python: {
      keywords: [
        "and",
        "as",
        "assert",
        "break",
        "class",
        "continue",
        "def",
        "del",
        "elif",
        "else",
        "except",
        "exec",
        "finally",
        "for",
        "from",
        "global",
        "if",
        "import",
        "in",
        "is",
        "lambda",
        "not",
        "or",
        "pass",
        "print",
        "raise",
        "return",
        "try",
        "while",
        "with",
        "yield",
        "async",
        "await",
        "nonlocal",
      ],
      builtins: [
        "abs",
        "all",
        "any",
        "bool",
        "dict",
        "dir",
        "enumerate",
        "filter",
        "float",
        "format",
        "frozenset",
        "getattr",
        "hasattr",
        "input",
        "int",
        "isinstance",
        "issubclass",
        "len",
        "list",
        "map",
        "max",
        "min",
        "object",
        "open",
        "pow",
        "print",
        "property",
        "range",
        "repr",
        "reversed",
        "round",
        "set",
        "setattr",
        "slice",
        "sorted",
        "str",
        "sum",
        "super",
        "tuple",
        "type",
        "zip",
        "__import__",
      ],
      operators: [
        "+",
        "-",
        "*",
        "/",
        "//",
        "%",
        "**",
        "=",
        "+=",
        "-=",
        "*=",
        "/=",
        "//=",
        "%=",
        "**=",
        "==",
        "!=",
        ">",
        "<",
        ">=",
        "<=",
        "and",
        "or",
        "not",
        "is",
        "is not",
        "in",
        "not in",
      ],
      snippets: {
        print: {
          prefix: "print",
          body: ["print($1)"],
          description: "Print to console",
        },
        function: {
          prefix: "def",
          body: ["def ${1:name}(${2:params}):", "\t$0"],
          description: "Function definition",
        },
        "if statement": {
          prefix: "if",
          body: ["if ${1:condition}:", "\t$0"],
          description: "If statement",
        },
        "for loop": {
          prefix: "for",
          body: ["for ${1:item} in ${2:items}:", "\t$0"],
          description: "For loop",
        },
        "try/except": {
          prefix: "try",
          body: ["try:", "\t$1", "except ${2:Exception} as ${3:e}:", "\t$0"],
          description: "Try/except block",
        },
        class: {
          prefix: "class",
          body: ["class ${1:ClassName}:", "\tdef __init__(self, ${2:params}):", "\t\t$0"],
          description: "Class definition",
        },
        with: {
          prefix: "with",
          body: ["with ${1:expression} as ${2:target}:", "\t$0"],
          description: "With statement",
        },
        "list comprehension": {
          prefix: "listcomp",
          body: ["[${1:expression} for ${2:item} in ${3:iterable}]"],
          description: "List comprehension",
        },
        "dictionary comprehension": {
          prefix: "dictcomp",
          body: ["{${1:key}: ${2:value} for ${3:item} in ${4:iterable}}"],
          description: "Dictionary comprehension",
        },
      },
      documentation: {
        def: "Defines a function in Python.",
        class: "Defines a class in Python.",
        if: "Executes a block of code if a specified condition is true.",
        for: "Iterates over a sequence (list, tuple, dictionary, set, or string).",
        while: "Creates a loop that executes as long as a condition is true.",
        try: "Implements error handling for code that might raise exceptions.",
        import: "Imports a module into the current namespace.",
        from: "Imports specific attributes from a module.",
        async: "Declares an asynchronous function or context manager.",
        await: "Pauses execution of an async function until a coroutine completes.",
        with: "Ensures proper acquisition and release of resources.",
        lambda: "Creates a small anonymous function.",
        list: "A mutable sequence of elements.",
        dict: "A mapping object that maps hashable values to arbitrary objects.",
        set: "An unordered collection of distinct hashable objects.",
        tuple: "An immutable sequence of elements.",
      },
    },
    html: {
      keywords: [
        "html",
        "head",
        "body",
        "div",
        "span",
        "p",
        "a",
        "img",
        "ul",
        "ol",
        "li",
        "table",
        "tr",
        "td",
        "th",
        "form",
        "input",
        "button",
        "select",
        "option",
        "textarea",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "header",
        "footer",
        "nav",
        "main",
        "section",
        "article",
        "aside",
        "figure",
        "figcaption",
        "audio",
        "video",
        "source",
        "canvas",
        "script",
        "style",
        "link",
        "meta",
        "title",
      ],
      builtins: [
        "id",
        "class",
        "href",
        "src",
        "alt",
        "type",
        "value",
        "name",
        "placeholder",
        "action",
        "method",
        "target",
        "rel",
        "width",
        "height",
        "style",
        "onclick",
        "onload",
        "onsubmit",
        "required",
        "disabled",
        "checked",
        "selected",
        "readonly",
        "maxlength",
        "min",
        "max",
        "pattern",
        "title",
        "aria-label",
        "aria-hidden",
        "data-",
      ],
      operators: [],
      snippets: {},
      documentation: {},
    },
    css: {
      keywords: [
        "align-content",
        "align-items",
        "align-self",
        "animation",
        "background",
        "border",
        "bottom",
        "box-shadow",
        "box-sizing",
        "color",
        "cursor",
        "display",
        "flex",
        "float",
        "font",
        "grid",
        "height",
        "justify-content",
        "left",
        "margin",
        "max-height",
        "max-width",
        "min-height",
        "min-width",
        "opacity",
        "order",
        "outline",
        "overflow",
        "padding",
        "position",
        "right",
        "text-align",
        "text-decoration",
        "text-transform",
        "top",
        "transform",
        "transition",
        "visibility",
        "width",
        "z-index",
      ],
      builtins: [
        "absolute",
        "auto",
        "block",
        "bold",
        "border-box",
        "center",
        "content-box",
        "fixed",
        "flex",
        "grid",
        "hidden",
        "inherit",
        "initial",
        "inline",
        "inline-block",
        "italic",
        "none",
        "normal",
        "pointer",
        "relative",
        "static",
        "unset",
        "visible",
      ],
      operators: [],
      snippets: {},
      documentation: {},
    },
    // Add more languages with similar structure
    // ...
  }
  
  export function getLanguageKeywords(language: string): LanguageKeywords {
    return (
      languageData[language] || {
        keywords: [],
        builtins: [],
        operators: [],
        snippets: {},
        documentation: {},
      }
    )
  }
  